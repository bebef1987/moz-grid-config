<project name="selenium-grid" default="launch-node" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless">

  <property environment="env"/>
  <exec executable="hostname" osfamily="unix" failifexecutionfails="false" outputproperty="env.COMPUTERNAME"/>
  <property name="env.HOSTNAME" value="${env.COMPUTERNAME}"/> <!-- Windows vs. Linux -->

  <property file="${basedir}/${env.HOSTNAME}.properties" />
  <property file="${basedir}/default.properties"/>

  <target name = "get-selenium">
    <mkdir dir="lib"/>
    <get src="http://selenium-release.storage.googleapis.com/${selenium.version.major}/selenium-server-standalone-${selenium.version.major}.${selenium.version.minor}.jar"
           dest="lib"
           usetimestamp="true"
           ignoreerrors="yes"/>

    <available file="lib/selenium-server-standalone-${selenium.version.major}.${selenium.version.minor}.jar" property="selenium.present"/>

    <fail unless="selenium.present" message="Unable to locate lib/selenium-server-standalone-${selenium.version.major}.${selenium.version.minor}.jar"/>

  </target>

  <target name="get-os-var">
    <echo> os family</echo>
    <!-- first create our properties -->
    <condition property="isMac" value="true">
      <os family="mac" />
    </condition>

    <condition property="isWindows" value="true">
      <os family="windows" />
    </condition>

    <condition property="isUnix" value="true">
      <os family="unix" />
    </condition>
    <echo> ${isWindows}</echo>
  </target>

  <target name="fetch-dependencies"
      depends="get-selenium, get-os-var, doMac, doWindows, doUnix">

    <echo> Geting chrome version</echo>
    <get src="http://chromedriver.storage.googleapis.com/${chromedriver.version}/${chrome.driver.download}"
      dest="lib"
      usetimestamp="true"
      ignoreerrors="yes"/>
    <unzip src="lib/${chrome.driver.download}" dest="lib/"/>
    <available file="lib/${chrome.driver.location}" property="chromedriver.present"/>
    <fail unless="chromedriver.present" message="Unable to locate lib/${chrome.driver.location}"/>
  </target>

  <!-- now create our operating system specific targets -->
  <target name="doMac" if="isMac">
    <property name="chrome.driver.location" value="chromedriver"/>
    <property name="chrome.driver.download" value="chromedriver_mac32.zip"/>
  </target>

  <target name="doWindows" if="isWindows">
    <echo> is windows</echo>
    <property name="chrome.driver.location" value="chromedriver.exe"/>
    <property name="chrome.driver.download" value="chromedriver_win32.zip"/>
    <echo> chrome prop: ${chrome.driver.download} ${chrome.driver.location}</echo>

    <get src="http://selenium-release.storage.googleapis.com/${selenium.version.major}/IEDriverServer_x64_${selenium.version.major}.${selenium.version.minor}.zip"
      dest="lib"
      usetimestamp="true"
      ignoreerrors="yes"/>

    <unzip src="lib/IEDriverServer_x64_${selenium.version.major}.${selenium.version.minor}.zip" dest="lib/"/>
    <available file="lib/IEDriverServer.exe" property="IEDriver.present"/>
    <fail unless="IEDriver.present" message="Unable to locate selenium driver"/>
  </target>

  <target name="doUnix" if="isUnix">
    <property name="chrome.driver.location" value="chromedriver"/>
    <property name="chrome.driver.download" value="chromedriver_linux32.zip"/>
  </target>


  <target name="set-config">
    <echo>os.name: ${os.name}</echo>
    <condition property="node.configuration.file" value="mac.json">
      <contains string="${os.name}" substring="mac" casesensitive="false"/>
    </condition>
    <condition property="node.configuration.file" value="winvista.json">
      <os name="Windows Vista"/>
    </condition>
    <condition property="node.configuration.file" value="win7.json">
      <os name="Windows 7"/>
    </condition>
    <property name="node.configuration.file" value="default.json"/>
    <echo>node.configuration.file: ${node.configuration.file}</echo>
  </target>

  <target name="set-hosts">
    <!-- nodes that can't be addressed by hostname -->
    <condition property="isNotAddressable">
      <matches pattern="${nonaddressable.hostnames.regex}"
               string="${env.HOSTNAME}"
               casesensitive="false"/>
    </condition>

    <!-- production nodes -->
    <condition property="isProduction">
      <matches pattern="${production.hostnames.regex}"
               string="${env.HOSTNAME}"
               casesensitive="false"/>
    </condition>

    <!-- if this is a production node set the production hub host -->
    <condition property="hub.host" value="${production.hub.host}">
      <isset property="isProduction"/>
    </condition>

    <!-- otherwise set to localhost (unless overridden) -->
    <property name="hub.host" value="localhost"/>

    <!-- if this is a production node that can't be addressed then use IP -->
    <condition property="node.host" value="IP">
      <and>
        <isset property="isProduction"/>
        <isset property="isNotAddressable"/>
      </and>
    </condition>

    <!-- if the hub is running on localhost then so must the node be -->
    <condition property="node.host" value="localhost">
      <matches pattern="localhost" string="${hub.host}"/>
    </condition>

    <!-- otherwise set to the hostname -->
    <property name="node.host" value="${env.HOSTNAME}"/>

    <echo>hub.host: ${hub.host}</echo>
    <echo>node.host: ${node.host}</echo>
  </target>

  <path id="selenium.classpath">
    <pathelement path="${basedir}/"/>
    <fileset dir="${basedir}/lib">
      <include name="selenium-server-standalone-${selenium.version.major}.${selenium.version.minor}.jar"/>
    </fileset>
    <pathelement path="${java.class.path}/"/>
  </path>

  <!-- debug target to show variables -->
  <target name="debug">
    <echoproperties/>
  </target>

  <target name="launch-hub"
          description="Launch Selenium Hub"
          depends="fetch-dependencies">
    <java classname="org.openqa.grid.selenium.GridLauncher"
          classpathref="selenium.classpath"
          fork="true"
          failonerror="true">
      <arg value="-role"/>
      <arg value="hub"/>
      <arg value="-hubConfig"/>
      <arg value="hub_configuration.json"/>
    </java>
  </target>

    <target name="launch-hub-debug"
          description="Launch Selenium Hub in debug mode"
          depends="fetch-dependencies">
    <java classname="org.openqa.grid.selenium.GridLauncher"
          classpathref="selenium.classpath"
          fork="true"
          failonerror="true">
      <arg value="-role"/>
      <arg value="hub"/>
      <arg value="-hubConfig"/>
      <arg value="hub_configuration.json"/>
      <arg value="-debug"/>
      <arg value="-log"/>
      <arg value="hub.log"/>
    </java>
  </target>

  <target name="launch-node"
          description="Launch Selenium Node"
          depends="fetch-dependencies, set-config, set-hosts">
    <java classpathref="selenium.classpath"
          classname="org.openqa.grid.selenium.GridLauncher"
          fork="true"
          failonerror="true">
      <arg value="-role"/>
      <arg value="node"/>
      <arg value="-id"/>
      <arg value="${env.HOSTNAME}"/>
      <arg value="-hub"/>
      <arg value="http://${hub.host}:${hub.port}/grid/register"/>
      <arg value="-host"/>
      <arg value="${node.host}"/>
      <arg value="-Dwebdriver.chrome.driver=lib/${chrome.driver.location}"/>
      <arg unless:blank="${isWindows}" value="-Dwebdriver.ie.driver=lib/IEDriverServer.exe"/>
      <arg value="-nodeConfig"/>
      <arg value="${node.configuration.file}"/>
    </java>
  </target>

  <target name="launch-node-debug"
          description="Launch Selenium Node in debug mode"
          depends="fetch-dependencies, set-config, set-hosts">
    <java classpathref="selenium.classpath"
          classname="org.openqa.grid.selenium.GridLauncher"
          fork="true"
          failonerror="true">
      <arg value="-role"/>
      <arg value="node"/>
      <arg value="-id"/>
      <arg value="${env.HOSTNAME}"/>
      <arg value="-hub"/>
      <arg value="http://${hub.host}:${hub.port}/grid/register"/>
      <arg value="-host"/>
      <arg value="${node.host}"/>
      <arg value="-Dwebdriver.chrome.driver=lib/${chrome.driver.location}"/>
      <arg if:true="${isWindows}" value="-Dwebdriver.ie.driver=lib/IEDriverServer.exe"/>
      <arg value="-nodeConfig"/>
      <arg value="${node.configuration.file}"/>
      <arg value="-debug"/>
      <arg value="-log"/>
      <arg value="node.log"/>
    </java>
  </target>
</project>
